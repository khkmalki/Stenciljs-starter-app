import createHistory from '../../utils/createBrowserHistory';
import createHashHistory from '../../utils/createHashHistory';
const HISTORIES = {
    'browser': createHistory,
    'hash': createHashHistory
};
/**
  * @name Router
  * @module ionic
  * @description
 */
export class Router {
    constructor() {
        this.root = '/';
        this.historyType = 'browser';
        // A suffix to append to the page title whenever
        // it's updated through RouteTitle
        this.titleSuffix = '';
        this.unsubscribe = () => { };
        this.match = null;
    }
    titleSuffixChanged(newValue) {
        this.activeRouter.set({
            titleSuffix: newValue
        });
    }
    computeMatch(pathname) {
        return {
            path: this.root,
            url: this.root,
            isExact: pathname === this.root,
            params: {}
        };
    }
    componentWillLoad() {
        const history = HISTORIES[this.historyType]();
        history.listen((location) => {
            this.activeRouter.set({ location: this.getLocation(location) });
        });
        this.activeRouter.set({
            location: this.getLocation(history.location),
            titleSuffix: this.titleSuffix,
            root: this.root,
            history
        });
        // subscribe the project's active router and listen
        // for changes. Recompute the match if any updates get
        // pushed
        this.unsubscribe = this.activeRouter.subscribe(() => {
            this.match = this.computeMatch();
        });
        this.match = this.computeMatch();
    }
    getLocation(location) {
        // Remove the root URL if found at beginning of string
        const pathname = location.pathname.indexOf(this.root) == 0 ?
            '/' + location.pathname.slice(this.root.length) :
            location.pathname;
        return Object.assign({}, location, { pathname });
    }
    componentDidUnload() {
        // be sure to unsubscribe to the router so that we don't
        // get any memory leaks
        this.unsubscribe();
    }
    render() {
        return h("slot", null);
    }
    static get is() { return "stencil-router"; }
    static get properties() { return { "activeRouter": { "context": "activeRouter" }, "historyType": { "type": "Any", "attr": "history-type" }, "match": { "state": true }, "root": { "type": String, "attr": "root" }, "titleSuffix": { "type": String, "attr": "title-suffix", "watchCallbacks": ["titleSuffixChanged"] } }; }
}
