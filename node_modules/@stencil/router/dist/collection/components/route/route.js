import { matchPath } from '../../utils/match-path';
/**
  * @name Route
  * @module ionic
  * @description
 */
export class Route {
    constructor() {
        this.unsubscribe = () => { return; };
        this.componentProps = {};
        this.exact = false;
        this.group = null;
        this.groupIndex = null;
        this.routeRender = null;
        this.match = null;
    }
    // Identify if the current route is a match.
    computeMatch(pathname) {
        if (!pathname) {
            const location = this.activeRouter.get('location');
            pathname = location.pathname;
        }
        return matchPath(pathname, {
            path: this.url,
            exact: this.exact,
            strict: true
        });
    }
    componentWillLoad() {
        // subscribe the project's active router and listen
        // for changes. Recompute the match if any updates get
        // pushed
        this.unsubscribe = this.activeRouter.subscribe((switchMatched) => {
            if (switchMatched) {
                this.match = null;
            }
            else {
                this.match = this.computeMatch();
            }
            return this.match;
        }, this.group, this.groupIndex);
        if (!this.group) {
            this.match = this.computeMatch();
        }
    }
    componentDidUnload() {
        // be sure to unsubscribe to the router so that we don't
        // get any memory leaks
        this.unsubscribe();
    }
    render() {
        // If there is no activeRouter then do not render
        // Check if this route is in the matching URL (for example, a parent route)
        if (!this.activeRouter || !this.match) {
            return null;
        }
        // component props defined in route
        // the history api
        // current match data including params
        const childProps = Object.assign({}, this.componentProps, { history: this.activeRouter.get('history'), match: this.match });
        // If there is a routerRender defined then use
        // that and pass the component and component props with it.
        if (this.routeRender) {
            return this.routeRender(Object.assign({}, childProps, { component: this.component }));
        }
        if (this.component) {
            const ChildComponent = this.component;
            return h(ChildComponent, Object.assign({}, childProps));
        }
    }
    static get is() { return "stencil-route"; }
    static get properties() { return { "activeRouter": { "context": "activeRouter" }, "component": { "type": String, "attr": "component" }, "componentProps": { "type": "Any", "attr": "component-props" }, "exact": { "type": Boolean, "attr": "exact" }, "group": { "type": String, "attr": "group" }, "groupIndex": { "type": Number, "attr": "group-index" }, "location": { "context": "location" }, "match": { "state": true }, "routeRender": { "type": "Any", "attr": "route-render" }, "url": { "type": "Any", "attr": "url" } }; }
}
